<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                          http://www.springframework.org/schema/context
                          http://www.springframework.org/schema/context/spring-context.xsd
                          http://www.springframework.org/schema/mvc
                          http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- 初始化默认的转换器 -->
    <mvc:annotation-driven validator="validator" />

    <context:annotation-config />

    <!--注解包扫描-->
    <context:component-scan base-package="com.sz" />

    <!-- 配置properties文件解析器-->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"
            p:location="classpath:DBConfig.properties"
            p:fileEncoding="UTF-8"/>

    <!--  配置数据源 -->
    <bean id="defaultDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"
          p:driverClassName="${jdbc.driver.class.name}"
          p:url="${jdbc.url}"
          p:username="${jdbc.username}"
          p:password="${jdbc.password}" />

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate" p:dataSource-ref="dataSource" />

    <!-- 动态数据源 -->
    <bean id="dataSource" class="com.sz7road.common.datasource.DynamicDataSource">
        <property name="targetDataSources">
            <map>
                <entry key="db_main_conf" value-ref="defaultDataSource"></entry>
            </map>
        </property>
        <property name="defaultTargetDataSource" ref="defaultDataSource"></property>
    </bean>

    <!-- 配置拦截器 -->
   <!-- <mvc:interceptors>
        <bean id="authInterceptor" class="com.sz.common.interceptor.AuthInterceptor" />
    </mvc:interceptors>         -->
      <!--
    <bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping">
        <property name="interceptors">
            <list>
                <ref bean="authInterceptor"/>
            </list>
        </property>
    </bean>
     -->


    <!--tiles视图解析器 -->
    <!--<bean id="tilesViewResolver" class="org.springframework.web.servlet.view.tiles2.TilesViewResolver">
        <property name="viewClass"
                  value="org.springframework.web.servlet.view.tiles2.TilesView" />
        <property name="order" value="1" />
    </bean>-->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.tiles2.TilesView"/>
        <property name="order" value="1" />
    </bean>

    <!--tiles配置文件加载 -->
    <bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles2.TilesConfigurer">
        <property name="definitions">
            <list>
                <value>classpath:/tiles/tiles-template.xml</value>
                <value>classpath:/tiles/tiles-config.xml</value>
            </list>
        </property>
        <property name="preparerFactoryClass"  value="org.springframework.web.servlet.view.tiles2.SpringBeanPreparerFactory"/>
    </bean>


    <!-- 配置视图协商的属性-->
    <bean id="contentNegotiationManagerFactoryBean"  class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
        <!-- 设置为true以忽略对Accept Header的支持-->
        <property name="ignoreAcceptHeader" value="true" />
        <!-- true，开启扩展名支持，false关闭支持 -->
        <property name="favorPathExtension" value="false" />
        <!-- 用于开启 /userinfo/123?format=json的支持 -->
        <property name="favorParameter" value="true" />
        <!-- 在没有扩展名和参数时即: "/user/1" 时的默认展现形式   -->
        <property name="defaultContentType" value="text/html" />
        <!--   参数值至mimeType的映射,即/rest?format=json json是key，application/json就是value暂时只支持json和xml -->
        <property name="mediaTypes">
            <map>
                <entry key="json" value="application/json" />
                <entry key="xml" value="application/xml" />
                <entry key="html" value="text/html" />
            </map>
        </property>
    </bean>



    <!-- 配置视图协商解析器 -->
    <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
        <property name="order" value="2" />
        <property name="contentNegotiationManager" ref="contentNegotiationManagerFactoryBean" />
        <property name="viewResolvers">
            <list>
                <!-- 配置视图信息-->
                <bean id="jspViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
                    <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
                    <property name="prefix" value="/WEB-INF/web/"/>
                    <property name="suffix" value=".jsp"/>
                </bean>
                <bean class="org.springframework.web.servlet.view.BeanNameViewResolver" />
            </list>
        </property>
        <property name="defaultViews">
            <list>
                <!-- json转换-->
                <bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView" />
            </list>
        </property>
    </bean>

    <!--指定错误信息-->
    <bean id="messageSource"
          class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="basename" value="classpath:language_message"/>
        <property name="fileEncodings" value="utf-8"/>
        <property name="cacheSeconds" value="120"/>
        <property name="useCodeAsDefaultMessage" value="false"/>
    </bean>

    <!--指定hibernate为JSR303实现类-->
    <bean id="validator"
          class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <property name="providerClass" value="org.hibernate.validator.HibernateValidator"/>
        <!-- 如果不加默认到 使用classpath下的 ValidationMessages.properties -->
        <property name="validationMessageSource" ref="messageSource"/>
    </bean>

    <!--adaptor配置类-->
    <bean id="webBindingInitializer"
          class="org.springframework.web.bind.support.ConfigurableWebBindingInitializer">
        <property name="conversionService" ref="conversionService"/>
        <property name="validator" ref="validator"/>
        <property name="propertyEditorRegistrar" ref="dateConverter"/>
    </bean>

    <bean class="com.sz.common.util.DateConvert" id="dateConverter"/>

    <!-- ①注册ConversionService 可自定义 -->
    <bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
    </bean>

    <!--默认的web容器Servlet，用于静态资源访问 -->
    <mvc:default-servlet-handler />

    <!-- SpringMVC上传文件时，需要配置MultipartResolver处理器 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 指定所上传文件的总大小不能超过1M。注意maxUploadSize属性的限制不是针对单个文件，而是所有文件的容量之和 -->
        <property name="maxUploadSize" value="1000000"/>
    </bean>

    <!-- SpringMVC在超出上传文件限制时，会抛出org.springframework.web.multipart.MaxUploadSizeExceededException -->
    <!-- 该异常是SpringMVC在检查上传的文件信息时抛出来的，而且此时还没有进入到Controller方法中 -->
    <bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <!-- 遇到MaxUploadSizeExceededException异常时，自动跳转到/WEB-INF/jsp/error_fileupload.jsp页面 -->
                <prop key="org.springframework.web.multipart.MaxUploadSizeExceededException">error_fileupload</prop>
            </props>
        </property>
    </bean>
    
    <bean id="freemarkerUtil" class="com.sz.fm.FreemarkerUtil"/>

        <!--  <import  resource="classpath:spring-validation.xml"/>-->
</beans>